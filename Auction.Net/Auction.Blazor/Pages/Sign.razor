@inject IManageUsersService userService
@inject NavigationManager navigation

<PageTitle>Sign</PageTitle>

<h1 class="text-center">Cadastre-se</h1>

<div id="divSign">
    <EditForm Model="@User" OnValidSubmit="SignIn" class="bg-opacity-50" style="font-size: 1rem;">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group row">
            <div class="col-sm-4">
                <label for="Auction.Name">Nome</label>
                <InputText @bind-Value="User.Name" />
                <ValidationMessage For="@(() => User.Name)" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-4">
                <label for="Auction.Name">E-mail</label>
                <InputText @bind-Value="User.Email" />
                <ValidationMessage For="@(() => User.Email)" />
            </div>
        </div>
        <div class="form-group row mb-2">
            <div class="col-sm-4">
                <Auction.Blazor.Components.Shared.InputPassword class="input" Title="Password" @bind-Value="@User.Password"></Auction.Blazor.Components.Shared.InputPassword>
            </div>
        </div>
        <div class="row">
            <button type="submit" class="btn btn-success">
                @ButtonTextSubmit
            </button>
            <button type="button" class="btn btn-success" @onclick="NavigateToDashboard">
                @ButtonTextCancelar
            </button>
        </div>
    </EditForm>
</div>
@code {
    public UserModel User { get; set; } = new();
    [Parameter] public EventCallback<UserModel> Login { get; set; }
    [Parameter] public string ButtonTextSubmit { get; set; } = "Cadastrar";
    [Parameter] public string ButtonTextCancelar { get; set; } = "Cancelar";
    public async Task SignIn()
    {
        var result = await userService.CreateUser(User);
        await Task.CompletedTask;
        if (result is not null)
        {
            await Login.InvokeAsync(User);
        }
    }
    private void NavigateToDashboard() => navigation.NavigateTo("/");
}